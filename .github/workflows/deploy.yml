name: Deploy to Plesk Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Composer dependencies
      run: composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader --no-progress
      
    - name: Install NPM dependencies
      run: npm ci --production=false
      
    - name: Build assets
      run: npm run build
      
    - name: Create deployment archive
      run: |
        # Create deployment directory
        mkdir -p deployment-build
        
        # Copy files to deployment directory (avoids "file changed" issues)
        rsync -av \
          --exclude='.git/' \
          --exclude='.github/' \
          --exclude='node_modules/' \
          --exclude='tests/' \
          --exclude='storage/app/' \
          --exclude='storage/framework/cache/' \
          --exclude='storage/framework/sessions/' \
          --exclude='storage/framework/testing/' \
          --exclude='storage/framework/views/' \
          --exclude='storage/logs/' \
          --exclude='.env' \
          --exclude='.env.example' \
          --exclude='deployment-build/' \
          ./ deployment-build/
        
        # Create archive from copied files
        cd deployment-build
        tar -czf ../deployment.tar.gz .
        cd ..
        
        # Cleanup
        rm -rf deployment-build
            
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        script_stop: true
        script: |
          set -e
          
          # Configuration
          APP_PATH="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs"
          BACKUP_PATH="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/backups/$(date +%Y%m%d_%H%M%S)"
          
          echo "🚀 Starting deployment to $APP_PATH"
          
          # Create backup directory
          mkdir -p "$(dirname "$BACKUP_PATH")"
          
          # Backup current deployment (if exists)
          if [ -d "$APP_PATH" ]; then
            echo "📦 Creating backup..."
            cp -r "$APP_PATH" "$BACKUP_PATH"
            echo "✅ Backup created at $BACKUP_PATH"
          fi
          
          # Create application directory
          mkdir -p "$APP_PATH"
          cd "$APP_PATH"
          
          # Download and extract deployment
          echo "⬇️  Downloading deployment archive..."
          
    - name: Upload and extract deployment
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        source: "deployment.tar.gz"
        target: "/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs/"
        
    - name: Complete deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        script_stop: true
        script: |
          set -e
          
          APP_PATH="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs"
          cd "$APP_PATH"
          
          # Extract deployment
          echo "📤 Extracting deployment..."
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Create Laravel directory structure
          echo "📁 Creating Laravel directories..."
          mkdir -p storage/{app,framework/{cache,sessions,testing,views},logs}
          mkdir -p bootstrap/cache
          touch storage/logs/laravel.log
          
          # Set permissions
          echo "🔒 Setting permissions..."
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;
          chmod -R 775 storage bootstrap/cache
          
          # Detect and set correct web user (CloudLinux/CentOS uses apache, Ubuntu uses www-data)
          if id -u apache >/dev/null 2>&1; then
            echo "Using apache:apache ownership"
            chown -R apache:apache storage bootstrap/cache
          elif id -u www-data >/dev/null 2>&1; then
            echo "Using www-data:www-data ownership"
            chown -R www-data:www-data storage bootstrap/cache
          elif id -u nginx >/dev/null 2>&1; then
            echo "Using nginx:nginx ownership"
            chown -R nginx:nginx storage bootstrap/cache
          else
            echo "⚠️  Could not detect web user, skipping chown"
          fi
          
          # Laravel deployment commands
          echo "⚡ Running Laravel commands..."
          
          # Detect PHP binary path
          if [ -x "/opt/plesk/php/8.3/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.3/bin/php"
            echo "Using PHP 8.3: $PHP_BIN"
          elif [ -x "/opt/plesk/php/8.2/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.2/bin/php"
            echo "Using PHP 8.2: $PHP_BIN"
          elif [ -x "/opt/plesk/php/8.1/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.1/bin/php"
            echo "Using PHP 8.1: $PHP_BIN"
          elif command -v php >/dev/null 2>&1; then
            PHP_BIN="php"
            echo "Using system PHP: $(php --version | head -n1)"
          else
            echo "❌ PHP not found!"
            exit 1
          fi
          
          # Create .env file from secrets
          echo "📝 Creating .env file..."
          cat > .env << 'EOF'
          # WordPress Templates Catalog - Production Environment
          APP_NAME="WordPress Templates Catalog"
          APP_ENV=production
          APP_KEY=base64:GENERATE_WITH_php_artisan_key:generate
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}
          APP_TIMEZONE=Europe/Berlin
          
          # Database Configuration
          DB_CONNECTION=mysql
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=3306
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # Templates Configuration
          TEMPLATES_ROOT=/srv/templates
          DEMO_URL_PATTERN=${{ secrets.APP_URL }}/{slug}/
          
          # Screenshot System Configuration
          CHROME_BINARY_PATH=/usr/bin/google-chrome-stable
          NODE_BINARY_PATH=/usr/bin/node
          SCREENSHOT_TIMEOUT=30000
          SCREENSHOT_WAIT_FOR_NETWORK_IDLE=true
          SCREENSHOT_DELAY=700
          
          # API Security
          API_TOKEN=${{ secrets.API_TOKEN }}
          
          # Cache and Session
          CACHE_DRIVER=file
          CACHE_PREFIX=wptemplates
          SESSION_DRIVER=file
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          
          # Queue Configuration
          QUEUE_CONNECTION=sync
          
          # Mail Configuration
          MAIL_MAILER=smtp
          MAIL_HOST=localhost
          MAIL_PORT=25
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS=noreply@${{ secrets.DOMAIN_NAME }}
          MAIL_FROM_NAME="${APP_NAME}"
          
          # Logging
          LOG_CHANNEL=daily
          LOG_LEVEL=error
          
          # Security
          BCRYPT_ROUNDS=12
          
          # Localization
          DEFAULT_LOCALE=en
          FALLBACK_LOCALE=en
          
          # Performance
          OPTIMIZE_IMAGES=true
          COMPRESS_RESPONSES=true
          
          # Rate Limiting
          API_RATE_LIMIT=60
          WEB_RATE_LIMIT=1000
          
          # Browser Configuration
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
          PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable
          EOF
          
          # Generate application key
          $PHP_BIN artisan key:generate --force
          
          # Cache configuration and routes
          $PHP_BIN artisan config:cache
          $PHP_BIN artisan route:cache
          $PHP_BIN artisan view:cache
          
          # Run database migrations
          $PHP_BIN artisan migrate --force --no-interaction
          
          # Link storage
          $PHP_BIN artisan storage:link
          
          # Restart queues if running
          $PHP_BIN artisan queue:restart || true
          
          # Clear application cache
          $PHP_BIN artisan cache:clear
          
          echo "✅ Deployment completed successfully!"
          
          # Test the application
          echo "🧪 Testing application..."
          
          # Try HTTPS first, then HTTP as fallback
          if curl -f -s -o /dev/null https://${{ secrets.DOMAIN_NAME }}/en/templates; then
            echo "✅ Application is responding correctly on HTTPS!"
          elif curl -f -s -o /dev/null http://${{ secrets.DOMAIN_NAME }}/en/templates; then
            echo "✅ Application is responding correctly on HTTP!"
            echo "⚠️  Note: HTTPS may need SSL certificate setup"
          else
            echo "⚠️  HTTP test failed, trying basic Laravel route..."
            # Test if Laravel is working at all
            if curl -f -s -o /dev/null http://${{ secrets.DOMAIN_NAME }}/; then
              echo "✅ Laravel is running, but templates route may need configuration"
            else
              echo "❌ Application is not responding. Check logs:"
              echo "- Application logs: storage/logs/"
              echo "- Web server logs: /var/log/"
              # Don't fail deployment for this - app is deployed successfully
            fi
          fi
          
  post-deploy:
    name: Post-deployment tasks
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Trigger template scan
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        script: |
          APP_PATH="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs"
          cd "$APP_PATH"
          
          # Detect PHP binary path
          if [ -x "/opt/plesk/php/8.3/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.3/bin/php"
          elif [ -x "/opt/plesk/php/8.2/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.2/bin/php"
          elif [ -x "/opt/plesk/php/8.1/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.1/bin/php"
          elif command -v php >/dev/null 2>&1; then
            PHP_BIN="php"
          else
            echo "❌ PHP not found!"
            exit 1
          fi
          
          echo "🔍 Running template scan..."
          $PHP_BIN artisan templates:scan
          
          echo "📸 Updating screenshots..."
          $PHP_BIN artisan templates:screenshot --timeout=300
          
          echo "✅ Post-deployment tasks completed!"
          
    - name: Cleanup old backups
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        script: |
          BACKUP_DIR="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/backups"
          
          if [ -d "$BACKUP_DIR" ]; then
            echo "🧹 Cleaning up old backups (keeping last 5)..."
            cd "$BACKUP_DIR"
            ls -t | tail -n +6 | xargs -r rm -rf
            echo "✅ Backup cleanup completed!"
          fi