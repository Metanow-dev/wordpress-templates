name: Deploy to Plesk Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.3'

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Composer dependencies
      run: composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader --no-progress
      
    - name: Install NPM dependencies
      run: npm ci --production=false
      
    - name: Build assets
      run: npm run build
      
    - name: Create deployment archive
      run: |
        # Create deployment directory
        mkdir -p deployment-build
        
        # Copy files to deployment directory (avoids "file changed" issues)
        rsync -av \
          --exclude='.git/' \
          --exclude='.github/' \
          --exclude='node_modules/' \
          --exclude='tests/' \
          --exclude='storage/app/' \
          --exclude='storage/framework/cache/' \
          --exclude='storage/framework/sessions/' \
          --exclude='storage/framework/testing/' \
          --exclude='storage/framework/views/' \
          --exclude='storage/logs/' \
          --exclude='.env' \
          --exclude='deployment-build/' \
          ./ deployment-build/
        
        # Create archive from copied files
        cd deployment-build
        tar -czf ../deployment.tar.gz .
        cd ..
        
        # Cleanup
        rm -rf deployment-build
            
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        script_stop: true
        script: |
          set -e
          
          # Configuration
          APP_PATH="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs"
          BACKUP_PATH="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/backups/$(date +%Y%m%d_%H%M%S)"
          
          echo "üöÄ Starting deployment to $APP_PATH"
          
          # Create backup directory
          mkdir -p "$(dirname "$BACKUP_PATH")"
          
          # Backup current deployment (if exists)
          if [ -d "$APP_PATH" ]; then
            echo "üì¶ Creating backup..."
            cp -r "$APP_PATH" "$BACKUP_PATH"
            echo "‚úÖ Backup created at $BACKUP_PATH"
          fi
          
          # Create application directory
          mkdir -p "$APP_PATH"
          cd "$APP_PATH"
          
          # Download and extract deployment
          echo "‚¨áÔ∏è  Downloading deployment archive..."
          
    - name: Upload and extract deployment
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        source: "deployment.tar.gz"
        target: "/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs/"
        
    - name: Complete deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        script: |
          set -e
          
          APP_PATH="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs"
          cd "$APP_PATH"
          
          # Extract deployment
          echo "üì§ Extracting deployment..."
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Create Laravel directory structure
          echo "üìÅ Creating Laravel directories..."
          mkdir -p storage/{app,framework/{cache,sessions,testing,views},logs}
          mkdir -p bootstrap/cache
          touch storage/logs/laravel.log
          
          # Set permissions
          echo "üîí Setting permissions..."
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;
          chmod -R 775 storage bootstrap/cache
          
          # Detect and set correct web user (CloudLinux/CentOS uses apache, Ubuntu uses www-data)
          if id -u apache >/dev/null 2>&1; then
            echo "Using apache:apache ownership"
            chown -R apache:apache storage bootstrap/cache
          elif id -u www-data >/dev/null 2>&1; then
            echo "Using www-data:www-data ownership"
            chown -R www-data:www-data storage bootstrap/cache
          elif id -u nginx >/dev/null 2>&1; then
            echo "Using nginx:nginx ownership"
            chown -R nginx:nginx storage bootstrap/cache
          else
            echo "‚ö†Ô∏è  Could not detect web user, skipping chown"
          fi
          
          # Laravel deployment commands
          echo "‚ö° Running Laravel commands..."
          
          # Use CloudLinux alt-php for consistency (deployment-proof)
          if [ -x "/opt/alt/php83/usr/bin/php" ]; then
            PHP_BIN="/opt/alt/php83/usr/bin/php"
            echo "Using CloudLinux alt-php 8.3: $PHP_BIN"
          elif [ -x "/opt/plesk/php/8.3/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.3/bin/php"
            echo "Using Plesk PHP 8.3: $PHP_BIN"
          elif [ -x "/opt/plesk/php/8.2/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.2/bin/php"
            echo "Using Plesk PHP 8.2: $PHP_BIN"
          elif command -v php >/dev/null 2>&1; then
            PHP_BIN="php"
            echo "Using system PHP: $(php --version | head -n1)"
          else
            echo "‚ùå PHP not found!"
            exit 1
          fi
          
          # Handle production environment file
          if [ ! -f .env ]; then
            if [ -f .env.production ]; then
              echo "üìù Creating .env from .env.production template..."
              cp .env.production .env
            else
              echo "‚ùå Neither .env nor .env.production found!"
              echo "Please ensure .env.production exists in your repository."
              exit 1
            fi
          fi
          
          # Generate app key if not set (prevent duplicates)
          if ! grep -q "APP_KEY=base64:" .env; then
            echo "üîë Generating application key..."
            # Remove any existing APP_KEY lines first to prevent duplicates
            sed -i '/^APP_KEY=/d' .env
            # Generate new key
            $PHP_BIN artisan key:generate --no-interaction
          else
            echo "‚úÖ APP_KEY already configured"
          fi
          
          # Clear any cached config first, then cache fresh config
          echo "üîÑ Refreshing configuration cache..."
          $PHP_BIN artisan config:clear
          $PHP_BIN artisan config:cache
          $PHP_BIN artisan route:cache
          $PHP_BIN artisan view:cache
          
          # Run database migrations
          $PHP_BIN artisan migrate --force --no-interaction
          
          # Link storage
          $PHP_BIN artisan storage:link
          
          # Restart queues if running
          $PHP_BIN artisan queue:restart || true
          
          # Clear application cache
          $PHP_BIN artisan cache:clear
          
          # COMPREHENSIVE deployment fix - handles BOTH TEMPLATES_ROOT and 403 errors
          echo "üö® Running comprehensive deployment fix..."
          chmod +x deploy/fix-deployment-403.sh
          ./deploy/fix-deployment-403.sh || echo "‚ö†Ô∏è  Comprehensive fix completed with warnings"
          
          echo "‚úÖ Deployment completed successfully!"
          
          # Health check deployment (fail fast if 403 returns)
          echo "üß™ Running deployment health checks..."
          
          # Wait a moment for web server to process changes
          sleep 5
          
          # Test 1: Static file (tests docroot and basic access)
          echo "üìÑ Testing static file access..."
          if curl -f -s https://${{ secrets.DOMAIN_NAME }}/health.txt | grep -q "OK"; then
            echo "‚úÖ Static files working correctly"
          elif curl -f -s http://${{ secrets.DOMAIN_NAME }}/health.txt | grep -q "OK"; then
            echo "‚úÖ Static files working (HTTP only - SSL may need setup)"
          else
            echo "‚ùå Static file test FAILED - docroot or permissions issue"
            echo "This indicates a deployment problem that needs fixing before continuing"
            exit 1
          fi
          
          # Test 2: PHP processing (tests PHP handler mapping)
          echo "üêò Testing PHP processing..."
          if curl -f -s https://${{ secrets.DOMAIN_NAME }}/test.php | grep -q "PHP Version: 8."; then
            echo "‚úÖ PHP processing working correctly"
          elif curl -f -s http://${{ secrets.DOMAIN_NAME }}/test.php | grep -q "PHP Version: 8."; then
            echo "‚úÖ PHP processing working (HTTP only)"
          else
            echo "‚ùå PHP processing test FAILED - handler mapping issue"
            echo "The 403 error is likely back. Check PHP handler configuration."
            exit 1
          fi
          
          # Test 3: Laravel application
          echo "üöÄ Testing Laravel application..."
          if curl -f -s -o /dev/null https://${{ secrets.DOMAIN_NAME }}/en/templates; then
            echo "‚úÖ Laravel application responding correctly (HTTPS)"
          elif curl -f -s -o /dev/null http://${{ secrets.DOMAIN_NAME }}/en/templates; then
            echo "‚úÖ Laravel application responding correctly (HTTP)"
          else
            echo "‚ö†Ô∏è  Laravel application test failed - may need manual configuration"
            echo "Static and PHP work, so this might be Laravel-specific routing"
            # Don't fail deployment for this - basic deployment succeeded
          fi
          echo "üîÑ Refreshing configuration cache..."
          $PHP_BIN artisan config:clear
          $PHP_BIN artisan config:cache
          $PHP_BIN artisan route:cache
          $PHP_BIN artisan view:cache
          
          
  post-deploy:
    name: Post-deployment tasks
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Trigger template scan
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        script: |
          APP_PATH="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs"
          cd "$APP_PATH"
          
          # Detect PHP binary path
          if [ -x "/opt/plesk/php/8.3/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.3/bin/php"
          elif [ -x "/opt/plesk/php/8.2/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.2/bin/php"
          elif [ -x "/opt/plesk/php/8.1/bin/php" ]; then
            PHP_BIN="/opt/plesk/php/8.1/bin/php"
          elif command -v php >/dev/null 2>&1; then
            PHP_BIN="php"
          else
            echo "‚ùå PHP not found!"
            exit 1
          fi
          
          echo "üîç Running template scan..."
          $PHP_BIN artisan templates:scan
          
          echo "üì∏ Updating screenshots..."
          $PHP_BIN artisan templates:screenshot --timeout=300
          
          echo "‚úÖ Post-deployment tasks completed!"
          
    - name: Cleanup old backups
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        key: ${{ secrets.PLESK_SSH_KEY }}
        port: ${{ secrets.PLESK_SSH_PORT || 22 }}
        script: |
          BACKUP_DIR="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/backups"
          
          if [ -d "$BACKUP_DIR" ]; then
            echo "üßπ Cleaning up old backups (keeping last 5)..."
            cd "$BACKUP_DIR"
            ls -t | tail -n +6 | xargs -r rm -rf
            echo "‚úÖ Backup cleanup completed!"
          fi