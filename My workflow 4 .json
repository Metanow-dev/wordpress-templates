{
  "name": "My workflow 4",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "wordpress-template-classify",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "45b3931f-2326-4af0-b063-abfccdd6ae78",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "webhookId": "template-classify-webhook"
    },
    {
      "parameters": {
        "url": "={{ $json.body.demo_url }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "6838d724-d55c-4bc5-80ee-db7629d23c9a",
      "name": "Fetch Website Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        224,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract key content from HTML for AI analysis\nconst inputData = $input.first();\n\n// Debug: Check what we're receiving\nconsole.log('Input data structure:', Object.keys(inputData.json || {}));\n\n// Try different possible locations for HTML content\nlet html = inputData.json.data || inputData.json.body || inputData.json.html;\n\n// Additional validation and debugging\nif (!html) {\n  console.log('HTML not found in expected locations. Full input:', JSON.stringify(inputData.json, null, 2));\n  throw new Error('HTML content not found in input data');\n}\n\nif (typeof html !== 'string') {\n  console.log('HTML is not a string, type:', typeof html);\n  throw new Error('HTML content is not a string. Type: ' + typeof html);\n}\n\n// Simple text extraction without cheerio dependency\nconst extractText = (html) => {\n  // Ensure html is a string before processing\n  if (!html || typeof html !== 'string') {\n    console.log('Invalid HTML passed to extractText:', typeof html);\n    return {\n      title: '',\n      description: '',\n      bodyText: '',\n      indicators: {\n        hasWooCommerce: false,\n        hasBooking: false,\n        hasMenu: false,\n        hasElementor: false,\n        hasDivi: false,\n        hasGutenberg: false\n      }\n    };\n  }\n\n  // Remove script and style tags\n  let cleaned = html.replace(/<script[^>]*>.*?<\\/script>/gis, '')\n                   .replace(/<style[^>]*>.*?<\\/style>/gis, '');\n  \n  // Extract title\n  const titleMatch = cleaned.match(/<title[^>]*>([^<]*)<\\/title>/i);\n  const title = titleMatch ? titleMatch[1].trim() : '';\n  \n  // Extract meta description\n  const descMatch = cleaned.match(/<meta[^>]*name=[\"']description[\"'][^>]*content=[\"']([^\"']*)[\"']/i);\n  const description = descMatch ? descMatch[1] : '';\n  \n  // Extract text content (simplified)\n  const bodyText = cleaned.replace(/<[^>]*>/g, ' ')\n                          .replace(/\\s+/g, ' ')\n                          .trim()\n                          .substring(0, 2000);\n  \n  // Look for indicators\n  const hasWooCommerce = /woocommerce|shop|cart|product/i.test(html);\n  const hasBooking = /booking|reservation|appointment/i.test(html);\n  const hasMenu = /menu|restaurant|food/i.test(html);\n  const hasElementor = /elementor/i.test(html);\n  const hasDivi = /divi-/i.test(html);\n  const hasGutenberg = /wp-block|gutenberg/i.test(html);\n  \n  return {\n    title,\n    description,\n    bodyText,\n    indicators: {\n      hasWooCommerce,\n      hasBooking,\n      hasMenu,\n      hasElementor,\n      hasDivi,\n      hasGutenberg\n    }\n  };\n};\n\n// Get webhook data\nconst webhookData = $('Webhook Trigger').first().json.body;\n\nconst templateData = {\n  slug: webhookData.slug,\n  name: webhookData.name,\n  demo_url: webhookData.demo_url,\n  active_theme: webhookData.active_theme || '',\n  api_callback_url: webhookData.api_callback_url,\n  api_token: webhookData.api_token\n};\n\nconst content = extractText(html);\n\nreturn [{ templateData, content }];"
      },
      "id": "a7abc99f-eea1-4c19-8780-9256e4b09e80",
      "name": "Process Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse and validate AI response\nconst aiResponse = $input.first().json;\nconst templateData = $('Process Content').first().json.templateData;\n\n// Debug: Log what we're receiving\nconsole.log('AI Response type:', typeof aiResponse);\nconsole.log('AI Response keys:', Object.keys(aiResponse || {}));\nconsole.log('Full AI Response:', JSON.stringify(aiResponse, null, 2));\n\ntry {\n  let classification;\n  \n  // Check if aiResponse is already a parsed object or needs parsing\n  if (typeof aiResponse === 'string') {\n    console.log('AI Response is string, attempting to parse...');\n    // Clean and parse AI response if it's a string\n    const cleanResponse = aiResponse.replace(/```json\\n?/, '').replace(/```\\n?$/, '').trim();\n    classification = JSON.parse(cleanResponse);\n  } else if (aiResponse && typeof aiResponse === 'object') {\n    console.log('AI Response is already an object');\n    // If it's already an object, use it directly\n    classification = aiResponse;\n    \n    // Check if the actual classification is nested (common in n8n AI nodes)\n    if (aiResponse.output) {\n      console.log('Found output property, using that');\n      classification = aiResponse.output;\n    } else if (aiResponse.text) {\n      console.log('Found text property, parsing that');\n      const cleanResponse = aiResponse.text.replace(/```json\\n?/, '').replace(/```\\n?$/, '').trim();\n      classification = JSON.parse(cleanResponse);\n    } else if (aiResponse.response) {\n      console.log('Found response property, using that');\n      classification = aiResponse.response;\n    }\n  } else {\n    throw new Error('AI response is neither string nor object');\n  }\n  \n  console.log('Parsed classification:', JSON.stringify(classification, null, 2));\n  \n  // Validate structure\n  if (!classification.primary_category || !classification.tags) {\n    console.log('Missing required fields:', {\n      has_primary_category: !!classification.primary_category,\n      has_tags: !!classification.tags\n    });\n    throw new Error('Missing required fields');\n  }\n  \n  // Ensure tags is array\n  if (!Array.isArray(classification.tags)) {\n    console.log('Tags is not array, converting:', classification.tags);\n    classification.tags = [];\n  }\n  \n  // Validate confidence\n  if (typeof classification.confidence !== 'number' || classification.confidence < 0 || classification.confidence > 1) {\n    console.log('Invalid confidence value:', classification.confidence);\n    classification.confidence = 0.5;\n  }\n  \n  // Add default descriptions if missing\n  if (!classification.description_en) {\n    classification.description_en = `WordPress template for ${classification.primary_category}`;\n  }\n  if (!classification.description_de) {\n    classification.description_de = `WordPress-Vorlage fÃ¼r ${classification.primary_category}`;\n  }\n  \n  console.log('Final classification:', JSON.stringify(classification, null, 2));\n  \n  return [{\n    json: {\n      templateData,\n      classification,\n      success: true\n    }\n  }];\n  \n} catch (error) {\n  console.log('Error occurred:', error.message);\n  console.log('Error stack:', error.stack);\n  \n  // Fallback classification\n  return [{\n    json: {\n      templateData,\n      classification: {\n        primary_category: 'portfolio',\n        tags: ['gutenberg'],\n        confidence: 0.3,\n        rationale: `AI parsing failed: ${error.message}`,\n        description_en: 'WordPress template',\n        description_de: 'WordPress-Vorlage'\n      },\n      success: false,\n      error: error.message \n    }\n  }];\n}"
      },
      "id": "7a2162a1-eceb-4e14-ae33-fc9f10fe8fff",
      "name": "Validate Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.templateData.api_callback_url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "specifyHeaders": "=keypair",
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"primary_category\": \"{{ $json.classification.primary_category }}\",\n    \"tags\": [{{ $json.classification.tags.map(item => `\"${item}\"`) }}],\n    \"confidence\": \"{{ $json.classification.confidence }}\",\n    \"rationale\": \"{{ $json.classification.rationale }}\",\n    \"description_en\": \"{{$json.classification.description_en}}\",\n    \"description_de\": \"{{$json.classification.description_de}}\"\n} ",
        "options": {
          "timeout": 10000
        }
      },
      "id": "b80feec3-94f7-41b5-bf9a-392a433cb3c5",
      "name": "Update Classification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1312,
        0
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "4InZm74eIehxvUcK",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": {{ $('Update Classification').item.json.success }},\n  \"message\": \"{{ $('Update Classification').item.json.message }}\",\n  \"template\": {\n    \"slug\": \"{{ $('Update Classification').item.json.template.slug }}\",\n    \"primary_category\": \"{{ $('Update Classification').item.json.template.primary_category }}\",\n    \"tags\": [{{ $('Update Classification').item.json.template.tags.map(item => `\"${item}\"`) }}],\n    \"confidence\": {{ $('Update Classification').item.json.template.confidence }},\n    \"needs_review\": {{ $('Update Classification').item.json.template.needs_review }}\n  }\n}",
        "options": {}
      },
      "id": "a2913149-bbdd-4ede-b6ad-7650912c2a63",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1536,
        0
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Based on your Laravel app's bilingual (English/German) configuration and the categories/tags from config/catalog.php, here's the exact prompt for the OpenAI node:\n\n  System Message:\n  You are an expert at categorizing WordPress websites for a bilingual (English/German) template catalog. Analyze the provided website content and categorize it accurately.\n\n  Available categories: ecommerce, portfolio, restaurant, hotel, real_estate, healthcare, education, agency, saas, blog_media, nonprofit, event, local_services, beauty_salon, automotive,\n  construction, legal, finance, fitness_wellness\n\n  Available tags: woocommerce, booking, menu, multilingual, elementor, divi, gutenberg, blog_heavy, gallery, rtl, dark_mode, one_page, lms, directory, events, portfolio_heavy\n\n  IMPORTANT: Provide descriptions in both English and German since this is a bilingual catalog.\n\n  Respond ONLY with valid JSON in this exact format:\n  {\n    \"primary_category\": \"category_name\",\n    \"tags\": [\"tag1\", \"tag2\"],\n    \"confidence\": 0.85,\n    \"rationale\": \"Brief explanation of why this categorization was chosen based on the content analysis\",\n    \"description_en\": \"Concise English description of what this template is for (max 100 chars)\",\n    \"description_de\": \"Concise German description of what this template is for (max 100 chars)\"\n  }\n\n  User Message:\n  Analyze this WordPress template:\n\n  Website Name: {{ $json.templateData.name }}\n  URL: {{ $json.templateData.demo_url }}\n  Active Theme: {{ $json.templateData.active_theme }}\n\n  Page Title: {{ $json.content.title }}\n  Meta Description: {{ $json.content.description }}\n\n  Content Sample: {{ $json.content.bodyText }}\n\n  Technical Features Detected:\n  - WooCommerce (ecommerce): {{ $json.content.indicators.hasWooCommerce }}\n  - Booking System: {{ $json.content.indicators.hasBooking }}\n  - Restaurant/Menu Features: {{ $json.content.indicators.hasMenu }}\n  - Elementor Page Builder: {{ $json.content.indicators.hasElementor }}\n  - Divi Page Builder: {{ $json.content.indicators.hasDivi }}\n  - Gutenberg Blocks: {{ $json.content.indicators.hasGutenberg }}\n\n  Based on this analysis, categorize the template and provide bilingual descriptions suitable for both English and German users browsing the catalog.\n\n  This prompt:\n  - References your exact categories and tags from config/catalog.php:4-12\n  - Emphasizes the bilingual requirement for English/German descriptions\n  - Provides structured analysis of technical features\n  - Asks for concise descriptions suitable for catalog browsing\n  - Maintains the JSON format your Laravel API expects",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        720,
        0
      ],
      "id": "296d3150-a910-4298-aa63-e6da12c068be",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        672,
        240
      ],
      "id": "1f567bd0-0320-484d-986c-653a5c82b43f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "5bxlgiW82CWa6JUS",
          "name": "Metanow open api - Lead Generation API"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"primary_category\": \"category_name\",\n    \"tags\": [\"tag1\", \"tag2\"],\n    \"confidence\": 0.85,\n    \"rationale\": \"Brief explanation of why this categorization was chosen based on the content analysis\",\n    \"description_en\": \"Concise English description of what this template is for (max 100 chars)\",\n    \"description_de\": \"Concise German description of what this template is for (max 100 chars)\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        864,
        240
      ],
      "id": "4983f3c5-151f-4600-b36d-b1d98a3e12ea",
      "name": "Structured Output Parser"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Fetch Website Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Website Content": {
      "main": [
        [
          {
            "node": "Process Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Content": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Response": {
      "main": [
        [
          {
            "node": "Update Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Classification": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Validate Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3f033039-6ef7-430e-8dc5-8e8ab67f00b3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9cf9df93adedf9a3cf8c947adbbfa5421022dc8224ec7057f8a23aa28853148a"
  },
  "id": "kwqPVVXkAzza7Mi1",
  "tags": []
}