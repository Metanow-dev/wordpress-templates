{
  "name": "WordPress Template AI Classification - Improved",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "wordpress-template-classify",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "45b3931f-2326-4af0-b063-abfccdd6ae78",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [0, 0],
      "webhookId": "template-classify-webhook"
    },
    {
      "parameters": {
        "url": "={{ $json.body.demo_url }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "6838d724-d55c-4bc5-80ee-db7629d23c9a",
      "name": "Fetch Website Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [224, 0]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced content extraction with better WordPress detection\nconst inputData = $input.first();\nlet html = inputData.json.data || inputData.json.body || inputData.json.html;\n\nif (!html || typeof html !== 'string') {\n  throw new Error('HTML content not found or invalid');\n}\n\nconst extractWordPressFeatures = (html) => {\n  // More sophisticated content analysis\n  let cleaned = html.replace(/<script[^>]*>.*?<\\/script>/gis, '')\n                   .replace(/<style[^>]*>.*?<\\/style>/gis, '');\n  \n  // Extract title and description\n  const titleMatch = cleaned.match(/<title[^>]*>([^<]*)<\\/title>/i);\n  const title = titleMatch ? titleMatch[1].trim() : '';\n  \n  const descMatch = cleaned.match(/<meta[^>]*name=[\"']description[\"'][^>]*content=[\"']([^\"']*)[\"']/i);\n  const description = descMatch ? descMatch[1] : '';\n  \n  // Extract meaningful text content\n  const bodyText = cleaned.replace(/<[^>]*>/g, ' ')\n                          .replace(/\\s+/g, ' ')\n                          .trim();\n  \n  // Extract headings for context\n  const headings = [];\n  const h1Matches = cleaned.match(/<h1[^>]*>([^<]*)<\\/h1>/gi) || [];\n  const h2Matches = cleaned.match(/<h2[^>]*>([^<]*)<\\/h2>/gi) || [];\n  const h3Matches = cleaned.match(/<h3[^>]*>([^<]*)<\\/h3>/gi) || [];\n  \n  [...h1Matches, ...h2Matches, ...h3Matches].forEach(match => {\n    const text = match.replace(/<[^>]*>/g, '').trim();\n    if (text.length > 3) headings.push(text);\n  });\n  \n  // Advanced feature detection\n  const indicators = {\n    // E-commerce indicators\n    hasWooCommerce: /woocommerce|wc-|shop|cart|product|checkout|add.to.cart/i.test(html),\n    hasShop: /shop|store|buy|purchase|price|\\$|€|£|product|cart/i.test(bodyText),\n    \n    // Booking/Appointment systems\n    hasBooking: /booking|reservation|appointment|schedule|book.now|calendar|availability/i.test(html),\n    \n    // Restaurant/Food indicators\n    hasMenu: /menu|restaurant|food|cuisine|chef|dining|recipe|ingredient/i.test(bodyText),\n    hasRestaurant: /restaurant|cafe|bistro|dining|reservation|table/i.test(bodyText),\n    \n    // Page builders\n    hasElementor: /elementor|elementor-/i.test(html),\n    hasDivi: /divi|et-|elegant/i.test(html),\n    hasGutenberg: /wp-block|gutenberg|block-editor/i.test(html) && !/(default|hello|twenty)/i.test(html),\n    \n    // Content types\n    hasPortfolio: /portfolio|work|project|gallery|showcase/i.test(bodyText),\n    hasBlog: /blog|post|article|news|read.more/i.test(bodyText),\n    hasTestimonials: /testimonial|review|client|customer/i.test(bodyText),\n    hasTeam: /team|staff|member|about.us|meet/i.test(bodyText),\n    \n    // Technical features\n    hasContactForm: /contact|form|message|email|phone/i.test(bodyText),\n    hasSocialMedia: /facebook|twitter|instagram|linkedin|social/i.test(html),\n    hasSlider: /slider|carousel|swiper|slick/i.test(html),\n    hasVideo: /video|youtube|vimeo|player/i.test(html),\n    \n    // Business types\n    isHealthcare: /health|medical|doctor|clinic|hospital|patient|therapy/i.test(bodyText),\n    isRealEstate: /real.estate|property|house|apartment|rent|buy|mortgage/i.test(bodyText),\n    isLegal: /law|legal|lawyer|attorney|court|justice/i.test(bodyText),\n    isEducation: /education|school|university|course|learn|student|teacher/i.test(bodyText),\n    isAgency: /agency|service|marketing|design|development|consulting/i.test(bodyText),\n    isTechnology: /technology|tech|software|app|digital|IT|development/i.test(bodyText),\n    isCreative: /creative|design|art|photography|studio|portfolio/i.test(bodyText),\n    \n    // Check for default WordPress content (indicates minimal customization)\n    isDefault: /(hello.world|sample.page|just.another.wordpress|coming.soon)/i.test(bodyText) || \n               bodyText.length < 500\n  };\n  \n  return {\n    title,\n    description,\n    bodyText: bodyText.substring(0, 2500), // Increased for better context\n    headings: headings.slice(0, 10),\n    indicators\n  };\n};\n\n// Get webhook data\nconst webhookData = $('Webhook Trigger').first().json.body;\n\nconst templateData = {\n  slug: webhookData.slug,\n  name: webhookData.name,\n  demo_url: webhookData.demo_url,\n  active_theme: webhookData.active_theme || '',\n  api_callback_url: webhookData.api_callback_url,\n  api_token: webhookData.api_token\n};\n\nconst content = extractWordPressFeatures(html);\n\nreturn [{ templateData, content }];"
      },
      "id": "a7abc99f-eea1-4c19-8780-9256e4b09e80",
      "name": "Enhanced Content Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [448, 0]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert WordPress template classifier for a bilingual catalog. Your job is to accurately categorize templates based on ACTUAL content, not assumptions.\n\n**CRITICAL ANALYSIS RULES:**\n1. **Default Content Detection**: If the content appears to be default WordPress (minimal content, \"Hello World\", sample pages), classify as 'portfolio' with basic tags only\n2. **Evidence-Based Tagging**: Only add tags that you can CLEARLY identify from the actual content\n3. **Conservative Approach**: When in doubt, use fewer, more accurate tags rather than guessing\n4. **Gutenberg Rule**: Only tag 'gutenberg' if you see actual wp-block classes AND it's not a default theme\n5. **WooCommerce Rule**: Only tag 'woocommerce' if you see clear ecommerce functionality (cart, products, checkout)\n\n**Available Categories:** {{ $json.content.availableCategories || 'ecommerce, portfolio, restaurant, hotel, real_estate, healthcare, education, agency, saas, blog_media, nonprofit, event, local_services, beauty_salon, automotive, construction, legal, finance, fitness_wellness, technology, consulting, creative, corporate, startup, photography, music, fashion, travel, food_beverage, interior_design, architecture, wedding, sports, gaming, news_magazine, personal_blog, church_religious, government, insurance, logistics, manufacturing' }}\n\n**Available Tags:** {{ $json.content.availableTags || 'woocommerce, booking, menu, multilingual, elementor, divi, gutenberg, blog_heavy, gallery, rtl, dark_mode, one_page, lms, directory, events, portfolio_heavy, responsive, mobile_first, seo_optimized, fast_loading, contact_form, social_media, video_background, slider, testimonials, pricing_tables, team_members, ajax, parallax, animations, custom_post_types, wpml_ready, bbpress, buddypress, membership, subscription, newsletter, popup, sticky_header, breadcrumbs, search_filter, infinite_scroll, lazy_loading, accessibility, gdpr_compliant' }}\n\n**ANALYSIS DATA:**\nWebsite: {{ $json.templateData.name }}\nURL: {{ $json.templateData.demo_url }}\nTheme: {{ $json.templateData.active_theme }}\n\nTitle: \"{{ $json.content.title }}\"\nDescription: \"{{ $json.content.description }}\"\nHeadings: [{{ $json.content.headings.join('\", \"') }}]\n\nContent Sample: \"{{ $json.content.bodyText }}\"\n\n**DETECTED FEATURES:**\nE-commerce: WooCommerce={{ $json.content.indicators.hasWooCommerce }}, Shop={{ $json.content.indicators.hasShop }}\nBooking: {{ $json.content.indicators.hasBooking }}\nRestaurant: Menu={{ $json.content.indicators.hasMenu }}, Restaurant={{ $json.content.indicators.hasRestaurant }}\nBuilders: Elementor={{ $json.content.indicators.hasElementor }}, Divi={{ $json.content.indicators.hasDivi }}, Gutenberg={{ $json.content.indicators.hasGutenberg }}\nContent: Portfolio={{ $json.content.indicators.hasPortfolio }}, Blog={{ $json.content.indicators.hasBlog }}, Team={{ $json.content.indicators.hasTeam }}\nFeatures: Contact={{ $json.content.indicators.hasContactForm }}, Social={{ $json.content.indicators.hasSocialMedia }}, Slider={{ $json.content.indicators.hasSlider }}\nBusiness: Healthcare={{ $json.content.indicators.isHealthcare }}, RealEstate={{ $json.content.indicators.isRealEstate }}, Legal={{ $json.content.indicators.isLegal }}, Education={{ $json.content.indicators.isEducation }}\nDefault Content: {{ $json.content.indicators.isDefault }}\n\n**CLASSIFICATION TASK:**\nBased on this analysis, provide accurate categorization. If this appears to be default WordPress content or has minimal customization, use conservative classification.\n\nRespond with valid JSON only:\n{\n  \"primary_category\": \"most_appropriate_category\",\n  \"tags\": [\"only_clearly_evident_tags\"],\n  \"confidence\": 0.XX,\n  \"rationale\": \"Explain your reasoning based on evidence\",\n  \"description_en\": \"Brief English description\",\n  \"description_de\": \"Brief German description\"\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [720, 0],
      "id": "296d3150-a910-4298-aa63-e6da12c068be",
      "name": "Smart AI Classifier"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {
          "temperature": 0.2,
          "maxTokens": 600
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [672, 240],
      "id": "1f567bd0-0320-484d-986c-653a5c82b43f",
      "name": "OpenAI GPT-4o",
      "credentials": {
        "openAiApi": {
          "id": "5bxlgiW82CWa6JUS",
          "name": "Metanow open api - Lead Generation API"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"primary_category\": \"category_name\",\n    \"tags\": [\"tag1\", \"tag2\"],\n    \"confidence\": 0.85,\n    \"rationale\": \"Evidence-based explanation\",\n    \"description_en\": \"English description (max 100 chars)\",\n    \"description_de\": \"German description (max 100 chars)\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [864, 240],
      "id": "4983f3c5-151f-4600-b36d-b1d98a3e12ea",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced validation with better error handling\nconst aiResponse = $input.first().json;\nconst templateData = $('Enhanced Content Analysis').first().json.templateData;\n\ntry {\n  let classification;\n  \n  // Handle different response structures from the AI agent\n  if (typeof aiResponse === 'string') {\n    const cleanResponse = aiResponse.replace(/```json\\n?/, '').replace(/```\\n?$/, '').trim();\n    classification = JSON.parse(cleanResponse);\n  } else if (aiResponse && typeof aiResponse === 'object') {\n    classification = aiResponse.output || aiResponse.text || aiResponse.response || aiResponse;\n    \n    if (typeof classification === 'string') {\n      const cleanResponse = classification.replace(/```json\\n?/, '').replace(/```\\n?$/, '').trim();\n      classification = JSON.parse(cleanResponse);\n    }\n  } else {\n    throw new Error('Invalid AI response format');\n  }\n  \n  // Validate and clean the classification\n  if (!classification.primary_category || !classification.tags) {\n    throw new Error('Missing required fields in classification');\n  }\n  \n  // Ensure tags is array and clean it\n  if (!Array.isArray(classification.tags)) {\n    classification.tags = [];\n  }\n  \n  // Remove invalid tags and limit to reasonable number\n  const validTags = ['woocommerce','booking','menu','multilingual','elementor','divi','gutenberg','blog_heavy','gallery','rtl','dark_mode','one_page','lms','directory','events','portfolio_heavy','responsive','mobile_first','seo_optimized','fast_loading','contact_form','social_media','video_background','slider','testimonials','pricing_tables','team_members','ajax','parallax','animations','custom_post_types','wpml_ready','bbpress','buddypress','membership','subscription','newsletter','popup','sticky_header','breadcrumbs','search_filter','infinite_scroll','lazy_loading','accessibility','gdpr_compliant'];\n  \n  classification.tags = classification.tags\n    .filter(tag => validTags.includes(tag))\n    .slice(0, 8); // Limit to max 8 tags\n  \n  // Validate confidence\n  if (typeof classification.confidence !== 'number' || classification.confidence < 0 || classification.confidence > 1) {\n    classification.confidence = 0.5;\n  }\n  \n  // Ensure descriptions exist and are reasonable length\n  if (!classification.description_en || classification.description_en.length > 100) {\n    classification.description_en = `${classification.primary_category.replace('_', ' ')} WordPress template`;\n  }\n  \n  if (!classification.description_de || classification.description_de.length > 100) {\n    classification.description_de = `${classification.primary_category.replace('_', ' ')} WordPress-Vorlage`;\n  }\n  \n  // Ensure rationale exists\n  if (!classification.rationale) {\n    classification.rationale = `Classified as ${classification.primary_category} based on content analysis`;\n  }\n  \n  return [{\n    json: {\n      templateData,\n      classification,\n      success: true\n    }\n  }];\n  \n} catch (error) {\n  // More conservative fallback\n  return [{\n    json: {\n      templateData,\n      classification: {\n        primary_category: 'portfolio',\n        tags: ['responsive'], // Only very basic tag\n        confidence: 0.2,\n        rationale: `Classification failed: ${error.message}. Using conservative fallback.`,\n        description_en: 'WordPress template',\n        description_de: 'WordPress-Vorlage'\n      },\n      success: false,\n      error: error.message\n    }\n  }];\n}"
      },
      "id": "7a2162a1-eceb-4e14-ae33-fc9f10fe8fff",
      "name": "Enhanced Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1088, 0]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.templateData.api_callback_url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.classification) }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "b80feec3-94f7-41b5-bf9a-392a433cb3c5",
      "name": "Update Classification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1312, 0],
      "credentials": {
        "httpHeaderAuth": {
          "id": "4InZm74eIehxvUcK",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": {{ $json.success !== false }},\n  \"message\": \"{{ $json.success !== false ? 'Template classified successfully' : 'Classification completed with fallback' }}\",\n  \"template\": {\n    \"slug\": \"{{ $json.templateData.slug }}\",\n    \"classification\": {{ JSON.stringify($json.classification) }},\n    \"confidence\": {{ $json.classification.confidence }}\n  }\n}",
        "options": {}
      },
      "id": "a2913149-bbdd-4ede-b6ad-7650912c2a63",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1536, 0]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Fetch Website Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Website Content": {
      "main": [
        [
          {
            "node": "Enhanced Content Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Content Analysis": {
      "main": [
        [
          {
            "node": "Smart AI Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Validation": {
      "main": [
        [
          {
            "node": "Update Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Classification": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI GPT-4o": {
      "ai_languageModel": [
        [
          {
            "node": "Smart AI Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Smart AI Classifier",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Smart AI Classifier": {
      "main": [
        [
          {
            "node": "Enhanced Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "improved-v1.0",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": ["wordpress", "ai", "classification", "improved"]
}